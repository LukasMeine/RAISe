<?php

/**
 * UIoT Service Layer
 * @version beta
 *                          88
 *                          ""              ,d
 *                                          88
 *              88       88 88  ,adPPYba, MM88MMM
 *              88       88 88 a8"     "8a  88
 *              88       88 88 8b       d8  88
 *              "8a,   ,a88 88 "8a,   ,a8"  88,
 *               `"YbbdP'Y8 88  `"YbbdP"'   "Y888
 *
 * @author Universal Internet of Things
 * @license MIT <https://opensource.org/licenses/MIT>
 * @copyright University of BrasÃ­lia
 */

namespace UIoT\Managers;

use UIoT\Factories\InstructionFactory;
use UIoT\Factories\MessageFactory;
use UIoT\Factories\ResourceFactory;
use UIoT\Handlers\RequestHandler;
use UIoT\Handlers\ResponseHandler;
use UIoT\Interfaces\FactoryInterface;

/**
 * Class RaiseManager
 * @package UIoT\Managers
 */
final class RaiseManager
{
    /**
     * RAISe Request Handler
     *
     * @var RequestHandler
     */
    protected static $request;

    /**
     * RAISe Response Handler
     *
     * @var ResponseHandler
     */
    protected static $response;

    /**
     * RAISe Resource Factory
     *
     * @var ResourceFactory
     */
    protected static $resource;

    /**
     * RAISe Message Factory
     *
     * @var MessageFactory
     */
    protected static $message;

    /**
     * RAISe Instruction Factory
     *
     * @var InstructionFactory
     */
    protected static $instruction;

    /**
     * Instantiate all RAISe Components
     */
    public function __construct()
    {
        self::getFactory('message', new MessageFactory);
        self::getFactory('resource', new ResourceFactory);
        self::getHandler('request', new RequestHandler);
        self::getHandler('response', new ResponseHandler);
        self::getFactory('instruction', new InstructionFactory);
    }

    /**
     * Get a RAISe Factory or Handler
     *
     * @param string $raiseComponent RAISe Component Name
     * @param FactoryInterface $classToInstantiate Factory to Instantiate if Necessary
     * @return InstructionFactory|MessageFactory|ResourceFactory
     */
    public static function getFactory($raiseComponent, FactoryInterface $classToInstantiate = null)
    {
        return null === self::${$raiseComponent} ? self::${$raiseComponent} = $classToInstantiate : self::${$raiseComponent};
    }

    /**
     * Get a RAISe Factory or Handler
     *
     * @param string $raiseComponent RAISe Component Name
     * @param ResponseHandler|RequestHandler $classToInstantiate Class to Instantiate if Necessary
     * @return RequestHandler|ResponseHandler
     */
    public static function getHandler($raiseComponent, $classToInstantiate = null)
    {
        return null === self::${$raiseComponent} &&
        ($classToInstantiate instanceof RequestHandler || $classToInstantiate instanceof ResponseHandler) ?
            self::${$raiseComponent} = $classToInstantiate : self::${$raiseComponent};
    }

    /**
     * Execute's RAISe Management Engine
     *
     * @return string
     */
    public static function startRaise()
    {
        /* Set RAISe Resource */
        self::getHandler('request')->setResource();

        /* Executes Requested Generic RAISe Interaction */
        self::executeInteraction();

        /* Send RAISe Message Back to Client */
        return self::getHandler('response')->sendResponse();
    }

    /**
     * Execute's RAISe Interaction Procedures
     */
    public static function executeInteraction()
    {
        /* check if Request is to DocumentRoot, if yes Welcome Message is triggered */
        if (self::getHandler('request')->getRequest()->getRequestUri() == '/') {
            self::getHandler('response')->setMessage('WelcomeToRaise');
            return;
        }

        /* If Resource does'nt exists. Stop here */
        if (self::getHandler('request')->getResource() === null) {
            self::getHandler('response')->setMessage('InvalidRaiseResource');
            return;
        }

        /* in other way executes the Interaction */
        self::getHandler('response')->executeInteraction(InteractionManager::getInstance()->getByMethod(
            self::getHandler('request')->getRequest()->getMethod()));
    }
}

